@startuml
CustomExecutor <-- Ex2_2
Task <-- Ex2_2
TaskWrapper <-- Ex2_2
TaskType <-- Ex2_2
Tests <-- Ex2_2
Task ..> CustomExecutor
Task ..> TaskType
Task ..> TaskWrapper



package Ex2_2{

}

class CustomExecutor {
 - PriorityBlockingQueue<Runnable> pq
   - ThreadPoolExecutor pool;
   - AtomicBoolean isDuringShutdown = new AtomicBoolean(false);
- int[] maxPriority = new int[10];
+ CustomExecutor()
     + <V> Future<V> submit(Task<V> task)
     + <V> Future<V> submit(Callable<V> callable)
    + public <V> Future<V> submit(Callable<V> callable, TaskType type)
    + Integer getCurrentMax()
    + void gracefullyTerminate()
}

class Task implements Callable{
- {static} final TaskType DEFAULT_TASK_TYPE = TaskType.OTHER;
- long submittedTime;
- Callable<V> callable
- TaskType type
- Task(Callable<V> callable, TaskType type)
+ static <V> Task<V> createTask(Callable<V> callable, TaskType type)
+ static <V> Task<V> createTask(Callable<V> callable)
+ V call()
+ Callable<V> getCallable()
+ long getSubmittedTime()
+ void setSubmittedTime(long submittedTime)
+ TaskType getType()
+ String toString()
}

enum TaskType{
    COMPUTATIONAL
    IO
    OTHER
    - int typePriority;
}

class TaskWrapper extends FutureTask implements Comparable{
- Task<V> _Task
+ TaskWrapper (Task<V> priorityTask)
+ Task<V> getTask ()
+ String toString()
+ int compareTo(TaskWrapper<V> other)
}


@enduml