@startuml
CustomExecutor <-- Ex2_2
Task <-- Ex2_2
TaskWrapper <-- Ex2_2
TaskType <-- Ex2_2
Tests <-- Ex2_2
Task ..> CustomExecutor
Task ..> TaskType
Task ..> TaskWrapper



package Ex2_2{

}

class CustomExecutor {
 - PriorityBlockingQueue<Runnable> pq
   - ThreadPoolExecutor pool;
   - int maxPriority
     + CustomExecutor()
     + <V> Future<V> submit(Task<V> task)
     + <V> Future<V> submit(Callable<V> callable)
    + public <V> Future<V> submit(Callable<V> callable, TaskType type)
    + void shutDown()
    + Integer getCurrentMax()
    + void gracefullyTerminate()
}

class Task implements Callable{
- {static} final TaskType DEFAULT_TASK_TYPE = TaskType.OTHER;
- long submittedTime;
- Callable<V> callable
- TaskType type
- Task(Callable<V> callable, TaskType type)
+ static <V> Task<V> createTask(Callable<V> callable, TaskType type)
+ static <V> Task<V> createTask(Callable<V> callable)
+ V call()
+ Callable<V> getCallable()
+ long getSubmittedTime()
+ void setSubmittedTime(long submittedTime)
+ TaskType getType()
+ String toString()
+ int compareTo(Task<V> o)
}



enum TaskType{
    COMPUTATIONAL
    IO
    OTHER
    - int typePriority;
}

class TaskWrapper{
- Task<V> _priorityTask
+ PriorityFutureTaskWrapper (Task<V> priorityTask)
+ Task<V> getPriorityTask ()
+ String toString()
}


@enduml